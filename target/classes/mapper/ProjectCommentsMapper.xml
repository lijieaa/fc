<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jianpanmao.projectComments.dao.ProjectCommentsMapper">
  <resultMap id="BaseResultMap" type="com.jianpanmao.projectComments.entity.ProjectComments">
    <id column="project_comments_id" jdbcType="INTEGER" property="projectCommentsId" />
    <result column="project_comments_parent" jdbcType="INTEGER" property="projectCommentsParent" />
    <result column="project_comments_type" jdbcType="TINYINT" property="projectCommentsType" />
    <result column="project_comments_status" jdbcType="TINYINT" property="projectCommentsStatus" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="project_comments_create_time" jdbcType="TIMESTAMP" property="projectCommentsCreateTime" />
    <result column="project_comments_update_time" jdbcType="TIMESTAMP" property="projectCommentsUpdateTime" />
    <result column="project_comments_content" jdbcType="VARCHAR" property="projectCommentsContent"/>
    <result column="project_top_comments_id" jdbcType="INTEGER" property="projectTopCommentsId"/>
    <association property="user" javaType="com.jianpanmao.sys.entity.DingtalkUser">
      <id column="userid" property="userid"></id>
      <result column="name" property="name"></result>
      <result property="headPic" column="head_pic"></result>
    </association>
    <association property="wxUserDetail" javaType="com.jianpanmao.wechat.entity.WxUserDetail">
      <result column="openid" property="openid"></result>
      <result property="nickname" column="nickname"></result>
      <result property="headimgurl" column="headimgurl"></result>
    </association>

  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.jianpanmao.projectComments.entity.ProjectComments">
    <result column="project_comments_content" jdbcType="LONGVARCHAR" property="projectCommentsContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    project_comments_id, project_comments_parent, project_comments_nickname, project_comments_type, 
    project_comments_status, project_id, project_comments_create_time, project_comments_update_time
  </sql>
  <sql id="Blob_Column_List">
    project_comments_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.jianpanmao.projectComments.entity.ProjectCommentsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from project_comments
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.jianpanmao.projectComments.entity.ProjectCommentsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from project_comments
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    SELECT pc.*,user.userid,user.name
    FROM project_comments pc
    LEFT JOIN dingtalk_user user
    ON pc.user_id = user.userid
    where project_comments_id = #{projectCommentsId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from project_comments
    where project_comments_id = #{projectCommentsId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jianpanmao.projectComments.entity.ProjectCommentsExample">
    delete from project_comments
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jianpanmao.projectComments.entity.ProjectComments">
    insert into project_comments (
     project_comments_parent,
    user_id,
    project_comments_type,
    project_comments_status,
    project_id,
    project_comments_content,
    project_top_comments_id,
    project_wx_id
      )
    values (
      #{projectCommentsParent,jdbcType=INTEGER},
      #{user.userid,jdbcType=VARCHAR},
      #{projectCommentsType,jdbcType=TINYINT},
      #{projectCommentsStatus,jdbcType=TINYINT},
      #{projectId,jdbcType=INTEGER},
      #{projectCommentsContent,jdbcType=LONGVARCHAR},
      #{projectTopCommentsId,jdbcType=INTEGER},
      #{wxId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jianpanmao.projectComments.entity.ProjectComments">
    insert into project_comments
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="projectCommentsId != null">
        project_comments_id,
      </if>
      <if test="projectCommentsParent != null">
        project_comments_parent,
      </if>
      <if test="projectCommentsNickname != null">
        project_comments_nickname,
      </if>
      <if test="projectCommentsType != null">
        project_comments_type,
      </if>
      <if test="projectCommentsStatus != null">
        project_comments_status,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="projectCommentsCreateTime != null">
        project_comments_create_time,
      </if>
      <if test="projectCommentsUpdateTime != null">
        project_comments_update_time,
      </if>
      <if test="projectCommentsContent != null">
        project_comments_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="projectCommentsId != null">
        #{projectCommentsId,jdbcType=INTEGER},
      </if>
      <if test="projectCommentsParent != null">
        #{projectCommentsParent,jdbcType=INTEGER},
      </if>
      <if test="projectCommentsNickname != null">
        #{projectCommentsNickname,jdbcType=VARCHAR},
      </if>
      <if test="projectCommentsType != null">
        #{projectCommentsType,jdbcType=TINYINT},
      </if>
      <if test="projectCommentsStatus != null">
        #{projectCommentsStatus,jdbcType=TINYINT},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="projectCommentsCreateTime != null">
        #{projectCommentsCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="projectCommentsUpdateTime != null">
        #{projectCommentsUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="projectCommentsContent != null">
        #{projectCommentsContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jianpanmao.projectComments.entity.ProjectCommentsExample" resultType="java.lang.Long">
    select count(*) from project_comments
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update project_comments
    <set>
      <if test="record.projectCommentsId != null">
        project_comments_id = #{record.projectCommentsId,jdbcType=INTEGER},
      </if>
      <if test="record.projectCommentsParent != null">
        project_comments_parent = #{record.projectCommentsParent,jdbcType=INTEGER},
      </if>
      <if test="record.projectCommentsNickname != null">
        project_comments_nickname = #{record.projectCommentsNickname,jdbcType=VARCHAR},
      </if>
      <if test="record.projectCommentsType != null">
        project_comments_type = #{record.projectCommentsType,jdbcType=TINYINT},
      </if>
      <if test="record.projectCommentsStatus != null">
        project_comments_status = #{record.projectCommentsStatus,jdbcType=TINYINT},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=INTEGER},
      </if>
      <if test="record.projectCommentsCreateTime != null">
        project_comments_create_time = #{record.projectCommentsCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.projectCommentsUpdateTime != null">
        project_comments_update_time = #{record.projectCommentsUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.projectCommentsContent != null">
        project_comments_content = #{record.projectCommentsContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update project_comments
    set project_comments_id = #{record.projectCommentsId,jdbcType=INTEGER},
      project_comments_parent = #{record.projectCommentsParent,jdbcType=INTEGER},
      project_comments_nickname = #{record.projectCommentsNickname,jdbcType=VARCHAR},
      project_comments_type = #{record.projectCommentsType,jdbcType=TINYINT},
      project_comments_status = #{record.projectCommentsStatus,jdbcType=TINYINT},
      project_id = #{record.projectId,jdbcType=INTEGER},
      project_comments_create_time = #{record.projectCommentsCreateTime,jdbcType=TIMESTAMP},
      project_comments_update_time = #{record.projectCommentsUpdateTime,jdbcType=TIMESTAMP},
      project_comments_content = #{record.projectCommentsContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update project_comments
    set project_comments_id = #{record.projectCommentsId,jdbcType=INTEGER},
      project_comments_parent = #{record.projectCommentsParent,jdbcType=INTEGER},
      project_comments_nickname = #{record.projectCommentsNickname,jdbcType=VARCHAR},
      project_comments_type = #{record.projectCommentsType,jdbcType=TINYINT},
      project_comments_status = #{record.projectCommentsStatus,jdbcType=TINYINT},
      project_id = #{record.projectId,jdbcType=INTEGER},
      project_comments_create_time = #{record.projectCommentsCreateTime,jdbcType=TIMESTAMP},
      project_comments_update_time = #{record.projectCommentsUpdateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jianpanmao.projectComments.entity.ProjectComments">
    update project_comments
    <set>
      <if test="projectCommentsParent != null">
        project_comments_parent = #{projectCommentsParent,jdbcType=INTEGER},
      </if>
      <if test="projectCommentsNickname != null">
        project_comments_nickname = #{projectCommentsNickname,jdbcType=VARCHAR},
      </if>
      <if test="projectCommentsType != null">
        project_comments_type = #{projectCommentsType,jdbcType=TINYINT},
      </if>
      <if test="projectCommentsStatus != null">
        project_comments_status = #{projectCommentsStatus,jdbcType=TINYINT},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="projectCommentsCreateTime != null">
        project_comments_create_time = #{projectCommentsCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="projectCommentsUpdateTime != null">
        project_comments_update_time = #{projectCommentsUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="projectCommentsContent != null">
        project_comments_content = #{projectCommentsContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where project_comments_id = #{projectCommentsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jianpanmao.projectComments.entity.ProjectComments">
    update project_comments
    set project_comments_parent = #{projectCommentsParent,jdbcType=INTEGER},
      project_comments_nickname = #{projectCommentsNickname,jdbcType=VARCHAR},
      project_comments_type = #{projectCommentsType,jdbcType=TINYINT},
      project_comments_status = #{projectCommentsStatus,jdbcType=TINYINT},
      project_id = #{projectId,jdbcType=INTEGER},
      project_comments_create_time = #{projectCommentsCreateTime,jdbcType=TIMESTAMP},
      project_comments_update_time = #{projectCommentsUpdateTime,jdbcType=TIMESTAMP},
      project_comments_content = #{projectCommentsContent,jdbcType=LONGVARCHAR}
    where project_comments_id = #{projectCommentsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jianpanmao.projectComments.entity.ProjectComments">
    update project_comments
    set project_comments_parent = #{projectCommentsParent,jdbcType=INTEGER},
      project_comments_nickname = #{projectCommentsNickname,jdbcType=VARCHAR},
      project_comments_type = #{projectCommentsType,jdbcType=TINYINT},
      project_comments_status = #{projectCommentsStatus,jdbcType=TINYINT},
      project_id = #{projectId,jdbcType=INTEGER},
      project_comments_create_time = #{projectCommentsCreateTime,jdbcType=TIMESTAMP},
      project_comments_update_time = #{projectCommentsUpdateTime,jdbcType=TIMESTAMP}
    where project_comments_id = #{projectCommentsId,jdbcType=INTEGER}
  </update>
  <select id="selectAll" parameterType="com.jianpanmao.projectComments.entity.ProjectComments" resultMap="BaseResultMap">
    select * from project_comments
  </select>
  <delete id="deleteBatch" parameterType="java.util.ArrayList">
    delete from project_comments
    where project_comments_id in
    <foreach collection="array" index="index" item="item" open="(" separator="," close=")">
              #{item}
    </foreach>
  </delete>

  <select id="selectByDto" parameterType="com.jianpanmao.projectComments.dto.ProjectCommentsDto" resultMap="BaseResultMap">
    SELECT pc.*,user.userid,user.name,user.head_pic,wud.openid,wud.nickname,wud.headimgurl
    FROM project_comments pc
    LEFT JOIN dingtalk_user user
    ON pc.user_id = user.userid
    LEFT JOIN wx_user_detail wud ON pc.project_wx_id = wud.openid
  WHERE pc.project_top_comments_id = 0
  and pc.project_comments_type = #{projectCommentsType}
  and pc.project_comments_status = #{projectCommentsStatus}
  and pc.project_id = #{projectId}
  ORDER BY pc.project_comments_create_time DESC
  </select>
  
  <!--查询评论下所有回复-->
  <select id="projectTopComments" resultMap="BaseResultMap">
    SELECT pc.*,user.userid,user.name,user.head_pic,wud.openid,wud.nickname,wud.headimgurl
     FROM project_comments pc
      LEFT JOIN dingtalk_user user
    ON pc.user_id = user.userid
     LEFT JOIN wx_user_detail wud ON pc.project_wx_id = wud.openid
    WHERE pc.project_top_comments_id = #{0}
    ORDER BY pc.project_comments_create_time DESC
  </select>

  <!--查询评论下回复个数-->
  <select id="topCommentsUnderCount" resultType="java.lang.Integer">
     SELECT COUNT(pc.project_comments_id)
     FROM project_comments pc
    WHERE pc.project_top_comments_id = #{0}
  </select>

  <!--查询项目下评论个数-->
  <select id="commentsCount" resultType="java.lang.Integer">
    SELECT
COUNT(project_comments_id)
FROM project_comments pc
WHERE pc.project_id = #{0}
and pc.project_comments_parent = 0
  </select>
</mapper>